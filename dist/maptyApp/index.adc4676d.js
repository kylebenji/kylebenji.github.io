"use strict";const months=["January","February","March","April","May","June","July","August","September","October","November","December"],form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation");class WorkoutStat{constructor(t,e){this.emoji=t,this.unit=e}calcDividedStat(t,e){return(t/e).toFixed(2)}}const distance=new WorkoutStat("","miles"),duration=new WorkoutStat("‚è±","min"),pace=new WorkoutStat("‚ö°Ô∏è","min/mile"),cadence=new WorkoutStat("ü¶∂üèº","spm"),speed=new WorkoutStat("‚ö°Ô∏è","mph"),elevation=new WorkoutStat("üåÑ","feet");class Workout{date=new Date;id=(Date.now()+"").slice(-10);description;static months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Oct","Nov","Dec"];constructor(t,e,o){this.stats=new Map,this.coords=t,this.stats.set(distance,e),this.stats.set(duration,o)}getFormattedDate(){return`${Workout.months[this.date.getMonth()]} ${this.date.getDate()}`}getHTML(){let t="";return this.stats.forEach((function(e,o){t+=`<div class="workout__details">\n            <span class="workout__icon">${o.emoji}</span>\n            <span class="workout__value">${e}</span>\n            <span class="workout__unit">${o.unit}</span>\n          </div>`})),`<li class="workout workout--${this.type}" data-id="${this.id}">\n          <h2 class="workout__title">${this.description}</h2>\n          ${t}\n          <button class="workout__delete">x</button>\n        </li>`}}class RunningWorkout extends Workout{type="running";constructor(t,e,o,i){super(t,e,o),this.stats.set(pace,pace.calcDividedStat(o,e)),this.stats.set(cadence,i),this.description=`Run on ${this.getFormattedDate()}`}getPopupString(){return`üèÉ‚Äç‚ôÇÔ∏è${this.description}`}}class CyclingWorkout extends Workout{type="cycling";constructor(t,e,o,i){super(t,e,o),this.stats.set(speed,speed.calcDividedStat(e,o/60)),this.stats.set(elevation,i),this.description=`Cycle on ${this.getFormattedDate()}`}getPopupString(){return`üö¥‚Äç‚ôÄÔ∏è${this.description}`}}class HikingWorkout extends Workout{type="hiking";constructor(t,e,o,i){super(t,e,o),this.stats.set(pace,pace.calcDividedStat(o,e)),this.stats.set(elevation,i),this.description=`Hike on ${this.getFormattedDate()}`}getPopupString(){return`üö∂‚Äç‚ôÇÔ∏è${this.description}`}}class Mapty{#t;#e;#o=[];#i=[];constructor(){this.#s(),this.#n(),inputType.addEventListener("change",this.#r.bind(this)),form.addEventListener("submit",this.#a.bind(this)),containerWorkouts.addEventListener("click",this.#u.bind(this))}#s(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this.#c.bind(this),(function(){alert("Could not find your position")}))}#c(t){const{latitude:e,longitude:o}=t.coords,i=[e,o];this.#t=L.map("map").setView(i,12),L.tileLayer("https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.#t),this.#o.forEach((t=>{this.#p(t)})),this.#t.on("click",this.#d.bind(this))}#d(t){form.classList.remove("hidden"),inputDistance.focus(),this.#e=t}#r(t){const e=t.target.value;"hiking"!==e&&"cycling"!==e||(inputElevation.closest(".form__row").classList.remove("form__row--hidden"),inputCadence.closest(".form__row").classList.add("form__row--hidden")),"running"===e&&(inputElevation.closest(".form__row").classList.add("form__row--hidden"),inputCadence.closest(".form__row").classList.remove("form__row--hidden"))}#a(t){const e=(...t)=>t.every((t=>Number.isFinite(t)||t>0));t.preventDefault();const o=inputType.value,i=+inputDistance.value,s=+inputDuration.value,{lat:n,lng:r}=this.#e.latlng,a=[n,r];let u;if("running"===o){const t=inputCadence.value;if(!e(i,s,t))return alert("inputs have to be positive numbers");u=new RunningWorkout(a,i,s,t)}if("cycling"===o||"hiking"===o){const t=inputElevation.value;if(!e(i,s,t))return alert("inputs have to be positive numbers");"cycling"===o&&(u=new CyclingWorkout(a,i,s,t)),"hiking"===o&&(u=new HikingWorkout(a,i,s,t))}this.#o.push(u),this.#p(u),this.#l(u),this.#h(),this.#m()}#p(t){const e={maxWidth:250,minWidth:100,autoClose:!1,closeOnClick:!1,className:`${t.type}-popup`,content:t.getPopupString()},o=L.marker(t.coords,{}).addTo(this.#t).bindPopup(L.popup(e)).openPopup();this.#i.push(o)}#l(t){const e=t.getHTML();form.insertAdjacentHTML("afterend",e)}#h(){inputCadence.value=inputDistance.value=inputDuration.value=inputElevation.value="",form.style.display="none",form.classList.add("hidden"),setTimeout((()=>form.style.display="grid"),1e3)}#u(t){const e=t.target.closest(".workout");if(!e)return;if(t.target.classList.contains("workout__delete"))return void this.#k(e);const o=e.dataset.id;let i=this.#o.find((t=>t.id===o));this.#t.panTo(i.coords)}#k(t){const e=t.dataset.id;let o=this.#o.findIndex((t=>t.id===e));this.#o.splice(o,1),t.remove(),this.#i[o].remove(),this.#i.splice(o,1),this.#m()}#m(){localStorage.setItem("workoutsMapty",JSON.stringify(this.#o,this.#g))}#n(){const t=JSON.parse(localStorage.getItem("workoutsMapty"),this.#w);t&&(t.forEach((t=>{"running"===t.type&&this.#o.push(Object.assign(new RunningWorkout,t)),"cycling"===t.type&&this.#o.push(Object.assign(new CyclingWorkout,t)),"hiking"===t.type&&this.#o.push(Object.assign(new HikingWorkout,t))})),this.#o.forEach((t=>{this.#l(t)})))}#g(t,e){return e instanceof Map?{dataType:"Map",value:Array.from(e.entries())}:e}#w(t,e){return"object"==typeof e&&null!==e&&"Map"===e.dataType?new Map(e.value):e}reset(){localStorage.removeItem("workoutsMapty"),location.reload()}}const mapty=new Mapty;
//# sourceMappingURL=index.adc4676d.js.map
