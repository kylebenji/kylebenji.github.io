{"mappings":"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","sources":["src/maptyApp/script.js"],"sourcesContent":["\"use strict\";\r\n\r\n// prettier-ignore\r\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nconst form = document.querySelector(\".form\");\r\nconst containerWorkouts = document.querySelector(\".workouts\");\r\nconst inputType = document.querySelector(\".form__input--type\");\r\nconst inputDistance = document.querySelector(\".form__input--distance\");\r\nconst inputDuration = document.querySelector(\".form__input--duration\");\r\nconst inputCadence = document.querySelector(\".form__input--cadence\");\r\nconst inputElevation = document.querySelector(\".form__input--elevation\");\r\n\r\nclass WorkoutStat {\r\n  constructor(emoji, unit) {\r\n    this.emoji = emoji;\r\n    this.unit = unit;\r\n  }\r\n\r\n  calcDividedStat(numerat, denom) {\r\n    return (numerat / denom).toFixed(2);\r\n  }\r\n}\r\nconst distance = new WorkoutStat(\"\", \"miles\");\r\nconst duration = new WorkoutStat(\"‚è±\", \"min\");\r\nconst pace = new WorkoutStat(\"‚ö°Ô∏è\", \"min/mile\");\r\nconst cadence = new WorkoutStat(\"ü¶∂üèº\", \"spm\");\r\nconst speed = new WorkoutStat(\"‚ö°Ô∏è\", \"mph\");\r\nconst elevation = new WorkoutStat(\"üåÑ\", \"feet\");\r\n\r\nclass Workout {\r\n  date = new Date();\r\n  id = (Date.now() + \"\").slice(-10);\r\n  description;\r\n  // prettier-ignore\r\n  static months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Oct\",\"Nov\",\"Dec\",];\r\n\r\n  constructor(coords, distanceIn, durationIn) {\r\n    this.stats = new Map();\r\n    this.coords = coords; //[lat,lng]\r\n    this.stats.set(distance, distanceIn);\r\n    this.stats.set(duration, durationIn);\r\n  }\r\n\r\n  getFormattedDate() {\r\n    return `${Workout.months[this.date.getMonth()]} ${this.date.getDate()}`;\r\n  }\r\n\r\n  getHTML() {\r\n    let innerHTML = \"\";\r\n\r\n    this.stats.forEach(function (value, key) {\r\n      innerHTML += `<div class=\"workout__details\">\r\n            <span class=\"workout__icon\">${key.emoji}</span>\r\n            <span class=\"workout__value\">${value}</span>\r\n            <span class=\"workout__unit\">${key.unit}</span>\r\n          </div>`;\r\n    });\r\n\r\n    return `<li class=\"workout workout--${this.type}\" data-id=\"${this.id}\">\r\n          <h2 class=\"workout__title\">${this.description}</h2>\r\n          ${innerHTML}\r\n          <button class=\"workout__delete\">x</button>\r\n        </li>`;\r\n  }\r\n}\r\n\r\nclass RunningWorkout extends Workout {\r\n  type = \"running\";\r\n  constructor(coords, distanceIn, durationIn, cadenceIn) {\r\n    super(coords, distanceIn, durationIn);\r\n    this.stats.set(pace, pace.calcDividedStat(durationIn, distanceIn));\r\n    this.stats.set(cadence, cadenceIn);\r\n    this.description = `Run on ${this.getFormattedDate()}`;\r\n  }\r\n\r\n  getPopupString() {\r\n    return `üèÉ‚Äç‚ôÇÔ∏è${this.description}`;\r\n  }\r\n}\r\n\r\nclass CyclingWorkout extends Workout {\r\n  type = \"cycling\";\r\n  constructor(coords, distanceIn, durationIn, elevationIn) {\r\n    super(coords, distanceIn, durationIn);\r\n    this.stats.set(speed, speed.calcDividedStat(distanceIn, durationIn / 60));\r\n    this.stats.set(elevation, elevationIn);\r\n    this.description = `Cycle on ${this.getFormattedDate()}`;\r\n  }\r\n\r\n  getPopupString() {\r\n    return `üö¥‚Äç‚ôÄÔ∏è${this.description}`;\r\n  }\r\n}\r\n\r\nclass HikingWorkout extends Workout {\r\n  type = \"hiking\";\r\n  constructor(coords, distanceIn, durationIn, elevationIn) {\r\n    super(coords, distanceIn, durationIn);\r\n    this.stats.set(pace, pace.calcDividedStat(durationIn, distanceIn));\r\n    this.stats.set(elevation, elevationIn);\r\n    this.description = `Hike on ${this.getFormattedDate()}`;\r\n  }\r\n\r\n  getPopupString() {\r\n    return `üö∂‚Äç‚ôÇÔ∏è${this.description}`;\r\n  }\r\n}\r\n\r\nclass Mapty {\r\n  #map;\r\n  #mapEvent;\r\n  #workouts = [];\r\n  #markers = [];\r\n\r\n  constructor() {\r\n    //get user position\r\n    this.#getPosition();\r\n\r\n    //get workouts from localStorage\r\n    this.#getLocalStorage();\r\n\r\n    //event listeners\r\n    inputType.addEventListener(\"change\", this.#toggleElevationField.bind(this));\r\n    form.addEventListener(\"submit\", this.#newWorkout.bind(this));\r\n    containerWorkouts.addEventListener(\r\n      \"click\",\r\n      this.#panToOrDeleteWorkout.bind(this)\r\n    );\r\n  }\r\n\r\n  #getPosition() {\r\n    //geolocation API\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        this.#loadMap.bind(this),\r\n        function () {\r\n          alert(\"Could not find your position\");\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  #loadMap(position) {\r\n    const { latitude, longitude } = position.coords;\r\n    const coords = [latitude, longitude];\r\n    //displaying map with leaflet\r\n    this.#map = L.map(\"map\").setView(coords, 12);\r\n\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\", {\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    }).addTo(this.#map);\r\n\r\n    this.#workouts.forEach((workout) => {\r\n      this.#renderWorkoutMarker(workout);\r\n    });\r\n\r\n    this.#map.on(\"click\", this.#showForm.bind(this));\r\n  }\r\n\r\n  #showForm(mapE) {\r\n    //render workout form\r\n    form.classList.remove(\"hidden\");\r\n    inputDistance.focus();\r\n    this.#mapEvent = mapE;\r\n  }\r\n\r\n  #toggleElevationField(e) {\r\n    const type = e.target.value;\r\n    if (type === \"hiking\" || type === \"cycling\") {\r\n      inputElevation\r\n        .closest(\".form__row\")\r\n        .classList.remove(\"form__row--hidden\");\r\n      inputCadence.closest(\".form__row\").classList.add(\"form__row--hidden\");\r\n    }\r\n    if (type === \"running\") {\r\n      inputElevation.closest(\".form__row\").classList.add(\"form__row--hidden\");\r\n      inputCadence.closest(\".form__row\").classList.remove(\"form__row--hidden\");\r\n    }\r\n  }\r\n\r\n  #newWorkout(e) {\r\n    const validInputs = (...inputs) =>\r\n      inputs.every((inp) => Number.isFinite(inp) || inp > 0);\r\n\r\n    e.preventDefault();\r\n\r\n    //get form information\r\n    const type = inputType.value;\r\n    const distanceIn = +inputDistance.value;\r\n    const durationIn = +inputDuration.value;\r\n    const { lat, lng } = this.#mapEvent.latlng;\r\n    const coords = [lat, lng];\r\n    let workout;\r\n\r\n    //create workout object based on type of activity\r\n    if (type === \"running\") {\r\n      const cadenceIn = inputCadence.value;\r\n      //validate data\r\n      if (!validInputs(distanceIn, durationIn, cadenceIn))\r\n        return alert(\"inputs have to be positive numbers\");\r\n      workout = new RunningWorkout(coords, distanceIn, durationIn, cadenceIn);\r\n    }\r\n    if (type === \"cycling\" || type === \"hiking\") {\r\n      const elevationIn = inputElevation.value;\r\n      //validate data\r\n      if (!validInputs(distanceIn, durationIn, elevationIn))\r\n        return alert(\"inputs have to be positive numbers\");\r\n      if (type === \"cycling\") {\r\n        workout = new CyclingWorkout(\r\n          coords,\r\n          distanceIn,\r\n          durationIn,\r\n          elevationIn\r\n        );\r\n      }\r\n      if (type === \"hiking\") {\r\n        workout = new HikingWorkout(\r\n          coords,\r\n          distanceIn,\r\n          durationIn,\r\n          elevationIn\r\n        );\r\n      }\r\n    }\r\n\r\n    //add object to workout array\r\n    this.#workouts.push(workout);\r\n\r\n    //render workout to map as a marker\r\n    this.#renderWorkoutMarker(workout);\r\n\r\n    //render workout on the list\r\n    this.#renderWorkoutSidebar(workout);\r\n\r\n    //hide form and clear inputs\r\n    this.#hideForm();\r\n\r\n    //load local storage\r\n    this.#setLocalStorage();\r\n  }\r\n\r\n  #renderWorkoutMarker(workout) {\r\n    const markerOptions = {}; //add options for marker if wanted\r\n    const popupOptions = {\r\n      //settings for popup on map\r\n      maxWidth: 250,\r\n      minWidth: 100,\r\n      autoClose: false,\r\n      closeOnClick: false,\r\n      className: `${workout.type}-popup`,\r\n      content: workout.getPopupString(),\r\n    };\r\n    const marker = L.marker(workout.coords, markerOptions)\r\n      .addTo(this.#map)\r\n      .bindPopup(L.popup(popupOptions))\r\n      .openPopup();\r\n    this.#markers.push(marker);\r\n  }\r\n\r\n  #renderWorkoutSidebar(workout) {\r\n    const element = workout.getHTML();\r\n    form.insertAdjacentHTML(\"afterend\", element);\r\n  }\r\n\r\n  #hideForm() {\r\n    inputCadence.value =\r\n      inputDistance.value =\r\n      inputDuration.value =\r\n      inputElevation.value =\r\n        \"\";\r\n\r\n    form.style.display = \"none\";\r\n    form.classList.add(\"hidden\");\r\n    setTimeout(() => (form.style.display = \"grid\"), 1000);\r\n  }\r\n\r\n  #panToOrDeleteWorkout(e) {\r\n    //get the workout from the target\r\n    const workoutLi = e.target.closest(\".workout\");\r\n    if (!workoutLi) return;\r\n    if (e.target.classList.contains(`workout__delete`)) {\r\n      this.#deleteWorkout(workoutLi);\r\n      return;\r\n    }\r\n    const id = workoutLi.dataset.id;\r\n    let workout = this.#workouts.find((wo) => wo.id === id);\r\n    //get the coordinates from the workout\r\n    //use map.panTo to pan to the coordinates\r\n    this.#map.panTo(workout.coords);\r\n  }\r\n\r\n  #deleteWorkout(workoutLi) {\r\n    //get workout and HTML element\r\n    const id = workoutLi.dataset.id;\r\n    let workoutInd = this.#workouts.findIndex((wo) => wo.id === id);\r\n    //remove workout from workouts object\r\n    this.#workouts.splice(workoutInd, 1);\r\n    //remove workout from sidebar\r\n    workoutLi.remove();\r\n    //remove pointer from map\r\n    this.#markers[workoutInd].remove();\r\n    this.#markers.splice(workoutInd, 1);\r\n    //update local storage so it doesn't come back on reload\r\n    this.#setLocalStorage();\r\n  }\r\n\r\n  #setLocalStorage() {\r\n    localStorage.setItem(\r\n      \"workoutsMapty\",\r\n      JSON.stringify(this.#workouts, this.#replacer)\r\n    );\r\n  }\r\n\r\n  #getLocalStorage() {\r\n    const data = JSON.parse(\r\n      localStorage.getItem(\"workoutsMapty\"),\r\n      this.#reviver\r\n    );\r\n\r\n    if (!data) return;\r\n    //make the data back into the correct kinds of objects\r\n    data.forEach((workout) => {\r\n      if (workout.type === \"running\")\r\n        this.#workouts.push(Object.assign(new RunningWorkout(), workout));\r\n      if (workout.type === \"cycling\")\r\n        this.#workouts.push(Object.assign(new CyclingWorkout(), workout));\r\n      if (workout.type === \"hiking\")\r\n        this.#workouts.push(Object.assign(new HikingWorkout(), workout));\r\n    });\r\n\r\n    this.#workouts.forEach((workout) => {\r\n      this.#renderWorkoutSidebar(workout);\r\n    });\r\n  }\r\n\r\n  #replacer(key, value) {\r\n    if (value instanceof Map) {\r\n      return {\r\n        dataType: \"Map\",\r\n        value: Array.from(value.entries()),\r\n      };\r\n    }\r\n    return value;\r\n  }\r\n\r\n  #reviver(key, value) {\r\n    if (typeof value === \"object\" && value !== null) {\r\n      if (value.dataType === \"Map\") {\r\n        return new Map(value.value);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  reset() {\r\n    localStorage.removeItem(\"workoutsMapty\");\r\n    location.reload();\r\n  }\r\n}\r\n\r\nconst mapty = new Mapty();\r\n"],"names":["months","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","WorkoutStat","constructor","emoji","unit","this","calcDividedStat","numerat","denom","toFixed","distance","duration","pace","cadence","speed","elevation","Workout","date","Date","id","now","slice","description","static","coords","distanceIn","durationIn","stats","Map","set","getFormattedDate","getMonth","getDate","getHTML","innerHTML","forEach","value","key","type","RunningWorkout","cadenceIn","super","getPopupString","CyclingWorkout","elevationIn","HikingWorkout","Mapty","map","mapEvent","workouts","markers","getPosition","getLocalStorage","addEventListener","toggleElevationField","bind","newWorkout","panToOrDeleteWorkout","navigator","geolocation","getCurrentPosition","loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","workout","renderWorkoutMarker","on","showForm","mapE","classList","remove","focus","e","target","closest","add","e1","validInputs","inputs","every","inp","Number","isFinite","preventDefault","lat","lng","latlng","push","renderWorkoutSidebar","hideForm","setLocalStorage","popupOptions","maxWidth","minWidth","autoClose","closeOnClick","className","content","marker","bindPopup","popup","openPopup","workout1","element","insertAdjacentHTML","style","display","setTimeout","e2","workoutLi","contains","deleteWorkout","dataset","find","wo","panTo","workoutInd","findIndex","splice","localStorage","setItem","JSON","stringify","replacer","data","parse","getItem","reviver","Object","assign","dataType","Array","from","entries","key1","value1","reset","removeItem","location","reload","mapty"],"version":3,"file":"index.adc4676d.js.map"}